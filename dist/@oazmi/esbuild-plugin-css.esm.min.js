var m=e=>{if(!(!e||e===""))return e.startsWith("npm:")?"npm":e.startsWith("jsr:")?"jsr":e.startsWith("data:")?"data":e.startsWith("http://")?"http":e.startsWith("https://")?"https":e.startsWith("file://")?"file":e.startsWith("./")||e.startsWith("../")?"relative":"local"},c=(e,t)=>{let o=t;if(typeof t=="string"){let n=m(t);switch(n){case"relative":case"npm":case"jsr":case"data":throw new Error(1?"the following base namespace is not supported: "+n:"");default:{o=c(t);break}}}let s=m(e);return s==="local"?new URL("file://"+e):s==="relative"?new URL(e,o):new URL(e)};var g="oazmi-css-plugin",p="oazmi-css",f=/\.css$/;var O=(e={})=>{let{cache:t=new Map,filter:o=f}=e;return{name:g,setup:s=>{let u=n=>{0&&console.log("[css-plugin] resolve args:",n);let{path:a,importer:i,kind:r}=n,l=c(a,r==="entry-point"?void 0:i).toString();return 0&&console.log("[css-plugin] css path resolved to:",l),{path:l,namespace:p,pluginData:{kind:r}}};s.onResolve({filter:o},u),s.onLoad({filter:/.*/,namespace:p},async n=>{0&&console.log("[css-plugin] load args",n);let{kind:a}=n.pluginData,{path:i}=n,r=t.get(i);if(0&&r&&console.log("[css-plugin] using cached result"),e.mode==="inject"&&a==="import-statement"||a==="dynamic-import"){let d=r??(await s.esbuild.build({...s.initialOptions,entryPoints:[i],plugins:[O({mode:"bundle",filter:o,cache:t})],bundle:!0,splitting:!1,write:!1})).outputFiles.pop().text;return t.set(i,d),{loader:"js",contents:`
const style_dom = document.createElement("style")
style_dom.textContent = \`${d}\`
document.head.append(style_dom)`}}let l=r??await(await fetch(new URL(i))).text();return t.set(i,l),{loader:"css",contents:l}})}}};export{O as cssPlugin};
