var w=e=>{if(!(!e||e===""))return e.startsWith("npm:")?"npm":e.startsWith("jsr:")?"jsr":e.startsWith("data:")?"data":e.startsWith("http://")?"http":e.startsWith("https://")?"https":e.startsWith("file://")?"file":e.startsWith("./")||e.startsWith("../")?"relative":"local"},g=(e,n)=>{let i=n;if(typeof n=="string"){let u=w(n);switch(u){case"relative":case"npm":case"jsr":case"data":throw new Error("the following base namespace is not supported: "+u);default:{i=g(n);break}}}let c=w(e);return c==="local"?new URL("file://"+e):c==="relative"?new URL(e,i):new URL(e)},R="oazmi-css-plugin",p="oazmi-css",W=p+"-url-preserve",v=p+"-url-copy",x=/\.css$/,j=[/^data:/],L=[/\.gif$/,/\.jpeg$/,/\.png$/,/\.svg$/,/\.ttf$/],U=(e={})=>{let{cache:n=new Map,filter:i=x,preserveUrl:c=j,copyUrl:u=L}=e,m=[];return{name:R,setup:l=>{let k=s=>{let{path:t,importer:o,kind:a}=s;return{path:g(t,a==="entry-point"?void 0:o).toString(),namespace:p,pluginData:{kind:a,importer:o,originalPath:t}}};c.forEach(s=>l.onResolve({filter:s,namespace:p},async t=>{let{path:o,importer:a,kind:r}=t;return console.assert(r==="import-rule"||r==="url-token","the importer of the following path is not a css file (not a css import-rule)",`
	path:`,o,`
importer:`,a,`
kind:`,r),{path:o,namespace:W,external:!0}})),u.forEach(s=>l.onResolve({filter:s,namespace:p},async t=>{let{path:o,importer:a,kind:r}=t;return console.assert(r==="import-rule"||r==="url-token","the importer of the following path is not a css file (not a css import-rule)",`
	path:`,o,`
importer:`,a,`
kind:`,r),{path:o,namespace:v,pluginData:{importer:a}}})),l.onLoad({filter:/.*/,namespace:v},async s=>{let t=g(s.path,s.pluginData.importer);return{loader:"copy",contents:new Uint8Array(await(await fetch(t)).arrayBuffer())}}),l.onResolve({filter:i},k),l.onLoad({filter:/.*/,namespace:p},async s=>{let{kind:t,importer:o,originalPath:a}=s.pluginData,{path:r}=s,f=n.get(r);if(e.mode==="inject"&&t==="import-statement"||t==="dynamic-import"){let h=f;if(h===void 0){let d=(await l.esbuild.build({...l.initialOptions,entryPoints:[r],plugins:[U({mode:"bundle",filter:i,cache:n})],outbase:"",bundle:!0,splitting:!1,write:!1})).outputFiles,y=d.findIndex(F=>i.test(F.path));console.assert(y>=0,"failed to discover the separately bundled css file."),h=d.splice(y,1).pop().text,n.set(r,h),m.push(...d)}return{loader:"js",contents:`
const style_dom = document.createElement("style")
style_dom.textContent = String.raw\``+h.replaceAll("`","`")+"`\ndocument.head.append(style_dom)"}}let _=f??await(await fetch(new URL(r))).text();return n.set(r,_),{loader:"css",contents:_}}),l.onEnd(async s=>{m.length>0&&(l.initialOptions.write!==!1?Promise.all(m.map(t=>Deno.writeFile(t.path,t.contents))):(s.outputFiles??=[],s.outputFiles.push(...m)))})}}};export{U as cssPlugin};
