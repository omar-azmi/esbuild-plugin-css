var u=t=>{if(!(!t||t===""))return t.startsWith("npm:")?"npm":t.startsWith("jsr:")?"jsr":t.startsWith("data:")?"data":t.startsWith("http://")?"http":t.startsWith("https://")?"https":t.startsWith("file://")?"file":t.startsWith("./")||t.startsWith("../")?"relative":"local"},d=(t,e)=>{let a=e;if(typeof e=="string"){let l=u(e);switch(l){case"relative":case"npm":case"jsr":case"data":throw new Error("the following base namespace is not supported: "+l);default:{a=d(e);break}}}let s=u(t);return s==="local"?new URL("file://"+t):s==="relative"?new URL(t,a):new URL(t)},h="oazmi-css-plugin",m="oazmi-css",_=/\.css$/,g=(t={})=>{let{cache:e=new Map,filter:a=_}=t;return{name:h,setup:s=>{let l=i=>{let{path:o,importer:n,kind:r}=i;return{path:d(o,r==="entry-point"?void 0:n).toString(),namespace:m,pluginData:{kind:r}}};s.onResolve({filter:a},l),s.onLoad({filter:/.*/,namespace:m},async i=>{let{kind:o}=i.pluginData,{path:n}=i,r=e.get(n);if(t.mode==="inject"&&o==="import-statement"||o==="dynamic-import"){let p=r??(await s.esbuild.build({...s.initialOptions,entryPoints:[n],plugins:[g({mode:"bundle",filter:a,cache:e})],bundle:!0,splitting:!1,write:!1})).outputFiles.pop().text;return e.set(n,p),{loader:"js",contents:`
const style_dom = document.createElement("style")
style_dom.textContent = \`${p}\`
document.head.append(style_dom)`}}let c=r??await(await fetch(new URL(n))).text();return e.set(n,c),{loader:"css",contents:c}})}}};export{g as cssPlugin};
